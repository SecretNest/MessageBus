?xml version="1.0" encoding="utf-8" ?>
<!-- This is an example code snippets file -->
<!-- ReSharper disable MarkupTextTypo -->
<examples>
  <item id="AsyncCall#All">
    <sampleCode language="CSharp">
      public async Task TestMethodAsync()
      {
          using var bus = new MessageBus();
          var subscriber1000Ticket = bus.RegisterSubscriber&lt;int, int&gt;("ArgumentMatching", Subscriber1000,
              new MessageBusSubscriberOptions&lt;int, int&gt;(sequence: 0, resultCheckingCallback: i =&gt; i &gt; 0));
          var subscriber100Ticket = bus.RegisterSubscriber&lt;int, int&gt;("ArgumentMatching", Subscriber100Async,
              new MessageBusSubscriberOptions&lt;int, int&gt;(sequence: 1, resultCheckingCallback: i =&gt; i &gt; 0));
          
          var publisherTicket = bus.RegisterPublisher&lt;int, int&gt;("ArgumentMatching", new MessageBusPublisherOptions&lt;int, int&gt;(defaultReturnValue: 5));

          var result1000 = publisherTicket.Executor.Execute(1500);
          var result100 = publisherTicket.Executor.Execute(300);
          var result5 = publisherTicket.Executor.Execute(80);
          var result1000Async = await publisherTicket.Executor.ExecuteAsync(1500);

          using var cancellationTokenSource = new CancellationTokenSource();
          cancellationTokenSource.Cancel();
          Exception e100Async = null!;
          try
          {
              var result100Async = await publisherTicket.Executor.ExecuteAsync(300, cancellationTokenSource.Token);
          }
          catch (Exception e)
          {
              e100Async = e;
          }

          var result5BAsync = await publisherTicket.Executor.ExecuteAsync(80);

          //after being executed: result1000 == 1000, result100 == 100, result5 == 5, e100Async is OperationCanceledException, result5BAsync == 5

          bus.UnregisterPublisher(publisherTicket);
          bus.UnregisterSubscriber(subscriber1000Ticket);
          bus.UnregisterSubscriber(subscriber100Ticket);
      }

      public int Subscriber1000(int argument)
      {
          if (argument &gt; 1000)
              return 1000;
          else
              return 0;
      }

      public async Task&lt;int&gt; Subscriber100Async(int argument, CancellationToken cancellationToken)
      {
          await Task.Delay(100, cancellationToken);
          if (argument &gt; 100)
              return 100;
          else
              return 0;
      }
    </sampleCode>
    <sampleCode language="VisualBasic">
    Async Function TestMethod() As Task
        Using bus As New MessageBus
            Dim subscriber1000Ticket = bus.RegisterSubscriber(Of Integer, Integer)("ArgumentMatching", AddressOf Subscriber1000, New MessageBusSubscriberOptions(Of Integer, Integer)(sequence:=0, resultCheckingCallback:=Function(i) i > 0))
            Dim subscriber100Ticket = bus.RegisterSubscriber(Of Integer, Integer)("ArgumentMatching", AddressOf Subscriber100Async, New MessageBusSubscriberOptions(Of Integer, Integer)(sequence:=1, resultCheckingCallback:=Function(i) i > 0))

            Dim publisherTicket = bus.RegisterPublisher(Of Integer, Integer)("ArgumentMatching", New MessageBusPublisherOptions(Of Integer, Integer)(defaultReturnValue:=5))

            Dim result1000 = publisherTicket.Executor.Execute(1500)
            Dim result100 = publisherTicket.Executor.Execute(300)
            Dim result5 = publisherTicket.Executor.Execute(80)
            Dim result1000Async = Await publisherTicket.Executor.ExecuteAsync(1500)

            Dim e100Async As Exception = Nothing
            Using cancellationTokenSource = New CancellationTokenSource()
                cancellationTokenSource.Cancel()

                Try
                    Dim result100Async = Await publisherTicket.Executor.ExecuteAsync(300, cancellationTokenSource.Token)
                Catch ex As Exception
                    e100Async = ex
                End Try
            End Using
            Dim result5BAsync = Await publisherTicket.Executor.ExecuteAsync(80)

            'after being executed: result1000 = 1000, result100 = 100, result5 = 5, e100Async is OperationCanceledException, result5BAsync = 5

            bus.UnregisterPublisher(publisherTicket)
            bus.UnregisterSubscriber(subscriber1000Ticket)
            bus.UnregisterSubscriber(subscriber100Ticket)
        End Using
    End Function

    Public Function Subscriber1000(argument As Integer) As Integer
        If argument > 1000 Then
            Return 1000
        Else
            Return 0
        End If
    End Function

    Public Async Function Subscriber100Async(argument As Integer, cancellationToken As CancellationToken) As Task(Of Integer)
        Await Task.Delay(100, cancellationToken)
        If argument > 100 Then
            Return 100
        Else
            Return 0
        End If
    End Function
    </sampleCode>
  </item>
</examples>

