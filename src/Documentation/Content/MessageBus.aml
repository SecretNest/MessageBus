<?xml version="1.0" encoding="utf-8"?>
<topic id="ac3c00b6-01a3-4de8-90ff-68ab8a3c90df" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para><codeEntityReference qualifyHint="false">T:SecretNest.MessageBus.MessageBus</codeEntityReference> instance handles publishers and subscribers registering and unregistering, hosts sequences for each message name and executes message when publisher requests.</para>
    </introduction>

    <section address="Instance">
      <title>Instance</title>
      <content>
        <para>To use <codeEntityReference qualifyHint="false">T:SecretNest.MessageBus.MessageBus</codeEntityReference>, an instance of MessageBus need to be created for registering publishers and subscribers, hosting sequences for each message name and executing message when publisher requests.</para>
        <codeReference>BusInstance#Define</codeReference>
        <para>MessageBus implements <codeEntityReference qualifyHint="false">T:System.IDisposable</codeEntityReference>. When disposing, all publishers and subscribers are unregistered. No unmanaged resource is used.</para>
      </content>
    </section>

    <section address="Shrink">
      <title>Shrink</title>
      <content>
        <para>By default, <codeEntityReference qualifyHint="false">P:SecretNest.MessageBus.MessageBus.AutoShrink</codeEntityReference> is on. When a publisher is unregistered, MessageBus checks to see if there are still publishers associated with the same message name. If not, related resources will be released. When the publishers are frequently unregistered and registered, the related checking and recycling work may affect the efficiency. In this case, turn off <codeEntityReference qualifyHint="false">P:SecretNest.MessageBus.MessageBus.AutoShrink</codeEntityReference> and call <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.MessageBus.MessageBus.ShrinkSequencers</codeEntityReference> manually when required.</para>
      </content>
    </section>

    <section address="HelloWorld">
      <title>Hello, World!</title>
      <content>
        <para>Uses MessageBus to execute subscriber with parameter when publisher requests.</para>
        <para>In code below, one publisher and one subscriber is registered with the name <quoteInline>Hello</quoteInline>. The method of subscriber is called when publisher requests.</para>
      </content>
      <sections>
        <section address="HelloWorldWithoutReturn">
          <title>Uses MessageBus to Relay Messages.</title>
          <content>
            <para>Subscribers have a parameter to receive data from Publisher as argument.</para>
            <para>Here is the full code.</para>
            <codeReference>Hello#All</codeReference>
            <para>To register a subscriber, uses the code below. Check <link xlink:href="ffa0c276-7f2a-4a36-8689-656502d5a9b4" /> for details.</para>
            <codeReference>Hello#Subscriber</codeReference>
            <para>To register a publisher, uses the code below. Check <link xlink:href="5df5be11-e1c0-4f83-9607-134a06f727ec" /> for details.</para>
            <codeReference>Hello#Publisher</codeReference>
            <para>When <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.MessageBus.MessageExecutorBase`1.Execute(`0)</codeEntityReference> calling, SubscriberMethod is executed.</para>
          </content>
        </section>
        <section address="HelloWorldWithReturn">
          <title>Uses MessageBus to Relay Messages and Get Return Data.</title>
          <content>
            <para>Unlike many publisher subscribe model, MessageBus supports return data from subscriber to publisher.</para>
            <para>Here is the full code.</para>
            <codeReference>HelloWithReturn#All</codeReference>
            <para>To register a subscriber, uses the code below. Check <link xlink:href="ffa0c276-7f2a-4a36-8689-656502d5a9b4" /> for details.</para>
            <codeReference>HelloWithReturn#Subscriber</codeReference>
            <para>To register a publisher, uses the code below. Check <link xlink:href="5df5be11-e1c0-4f83-9607-134a06f727ec" /> for details.</para>
            <codeReference>HelloWithReturn#Publisher</codeReference>
            <para>When <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.MessageBus.MessageExecutorBase`2.Execute(`0)</codeEntityReference> calling, SubscriberMethod is executed and the return value is sent back to the caller.</para>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
      <link xlink:href="4c02af66-f784-4908-8806-39f16ea0591e" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>
